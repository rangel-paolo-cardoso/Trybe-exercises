Exerc√≠cio 1: Em um contexto de orienta√ß√£o a objetos, como podemos definir o que s√£o mensagens e qual a sua import√¢ncia?
R: Mensagens s√£o informa√ß√µes trocadas entre objetos em mem√≥ria.
S√£o as informa√ß√µes trocasas que fazem a aplica√ß√£o funcionar. Sem elas nada aconteceria.

Exerc√≠cio 2: Ap√≥s definir mensagens, como podemos definir interface e qual a rela√ß√£o entre os conceitos?
R: Interface √© uma camada que intercepta o acesso a funcionalidade,
Fazemos uma chamada para trocar mensagens por meio da interface para proteger
o interior do objeto, informa√ß√µes e seu funcionamento.

Exerc√≠cio 3: Para exercitar nossa capacidade de abstra√ß√£o, vamos modelar algumas partes de um software de geometria. Como poder√≠amos modelar um objeto ret√¢ngulo?
R: Precisamos de atributos como altura, largura, ainda se quisermos
podemos definir a espessura de seu tra√ßo, cor etc.

Exerc√≠cio 4: E como poder√≠amos definir um c√≠rculo?
R: Podemos definir atributos como raio e atrav√©s de m√©todos podemos
exibir seu comprimento de aro, valor de PI, di√¢metro, etc. 

Exerc√≠cio 5: Notaram que todas estas classes tem caracter√≠sticas em comum?
Que tal abstrairmos utilizando a heran√ßa em uma classe que represente figuras geom√©tricas em geral? Utilize a mesma nota√ß√£o anterior.
R: Tamanho do lado, n√∫mero de lados.

Exerc√≠cio 6: Vamos mudar um pouco nosso contexto para um sistema de
vendas de uma cafeteria. Como podemos abstrair um pedido?
Quais as suas caracter√≠sticas e comportamentos?
R: Nome do card√°pio, acompanhamento, pre√ßo, tempo de preparo, forma de pagamento, data/hora do pedido, data/hora de entrega.

Exerc√≠cio 7: Considerando que uma das caracter√≠sticas de um pedido pode ser a sua
forma de pagamento (cart√£o alimenta√ß√£o, cart√£o d√©bito/cr√©dito, dinheiro),
como poder√≠amos definir cada uma das formas de pagamento? E se todas as formas de
pagamento tivessem como requisito a autoriza√ß√£o antes do pagamento?
üê¶ Um detalhe aqui √© que como todos tipos de pagamentos possuem o comportamento de
autoriza√ß√£o, que podem variar pedido a pedido.
R: A ideia seria criar uma classe abstrata para colocar informa√ß√µes e m√©todos como:
varificar autoriza√ß√£o (m√©todo), tipo de pagamento (atributo),
e a partir desta classe abstrata especializar cada forma de pagamento.


Exerc√≠cio 8: Imagine um sistema de mensageria em uma empresa de delivery,
que notifica uma base de cliente sobre suas promo√ß√µes. Estas notifica√ß√µes
devem ser feitas por email, sms ou push notification e voc√™ √© a pessoa respons√°vel
por modelar este servi√ßo. Defina utilizando a mesma nota√ß√£o dos exerc√≠cios anteriores.
R: Classe abstrata Notification com atributos como,
T√≠tulo
Texto da mensagem,
identifica√ß√£o do destinat√°rio
a partir dela criar as classes
EmailNotification, SMSNotification e PushNotification.
Nessas classes especializada evoluir os m√©todos para mandar mensagens de formas diferentes.

Exerc√≠cio 9: Notou que os pilares da orienta√ß√£o a objetos come√ßam a manifestar a
medida que fizemos nossos exerc√≠cios de modelagem? Que tal agora ent√£o modelarmos
uma televis√£o? Ser√° que mais pilares aparecer√£o?
üê¶ Pense em como encapsular comportamentos como o estado (ligado/desligado),
ou a taxa de varia√ß√£o do volume, que muda de TV para TV etc.
R: TV passui atributos, cor, tamanho (inch), tipo (LED, LDC, Plasma, Tubo),
marca, volume, status (desligada).
M√©todos: ligar, desligar, aumentar o volume, diminuir o volume, trocar de canal.
Atributos como volume e status s√£o privado, um usu√°rio provavelmente n√£o vai colocar
a m√£o dentro dos circuitos da TV para ligar os desligar e ainda alterar o volume,
haver√° risco de choque e at√© morte, por esse motivo temos a interface controle remoto,
os bot√µes e macanismos do controle fazer a chamada de fun√ß√µes para aumenter e diminuir
o volume da TV, bem como ligar os desligar o aparelho, protejento a vida do usu√°rio e 
mantando o funcionamento do produto.
